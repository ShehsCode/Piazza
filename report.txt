/* 
~~~ Necessary packages were installed, leaving the following dependencies:
- Express, a convenient framework to help with this use case for Node.js with robust features.
- DotEnv, a useful module for simplifying configuration settings.
- Mongoose, a library allowing us to quickly define data schema for ease of use.
- Nodemon, which detects changes and allows us to automatically restart the server when they are applied.
- JWT, for safe, digitally signed authentication and authorisation. 
- JOI, library for data validation, often used synergistically with Express.
- bcryptjs, a library that provides a means of hashing passwords for additional security.
- body-parser, middleware which is useful for receiving and extracting data from the body of requests.

~~~ .env file was created with the requisite address and password to allow connection to MongoDB;
further: a .gitignore was created to hide the password information before pushing to repo, 
and will be useful for hiding any additional sensitive information later.

~~~ Constants added to app.js to ensure the correct modules are imported. Perfunctory status messages
added.

~~~ Schema defined in the User.JS file; subsequently created Validation.JS to ensure compliance on both
registration and login.

~~~ Tests run, connection established, test registration and login for dummy user working correctly.

~~~ Post schema added: title, category, timestamp, status, owner (with name nested), expiration, body, 
like/dislike count, comment count. 

~~~ Token.js added (credit to YouTube user CloudTV for this c:).

~~~ Validation file edited to include post validation. Post body, category, and title are all checked
on posting.

~~~ Testing revealed significant issues which required debugging. Posts should now work
as expected, rejecting anything outside of the schema (no valid category, no body to post, &c.).

~~~ Implemented like and dislike schema.